(* :Title: QuantumKernel *)(* :Author: Manfred Liebmann, Wolfgang Thaller *)(* :Summary: Interactive Visualization System for Quantum Mechanical Problems. *)(* :Context: QuantumMechanics`QuantumKernel` *)(* :Package Version: 1.1 *)(* :Copyright: ©1996-98 Manfred Liebmann, ©1998 Wolfgang Thaller *)(* :Source: Manfred Liebmann: Diploma Thesis, University of Graz, Austria, 1998 *)(* :Mathematica Version: 3.0 *)BeginPackage["QuantumMechanics`QuantumKernel`"];	(* QuantumKernel *)		QuantumLink::usage = "QuantumLink";		(* TFunction Objects *)	QNewFunction::usage = 		"QNewFunction[arrays] generates a new function object for use by		QuantumKernel. The argument is one or more lists of real numbers.		QNewFunction returns a reference to the function object.";	QDisposeFunction::usage = 		"QDisposeFunction[function] removes the function object 'function'		which has been generated by QNewFunction";	QGetArray::usage = 		"QGetArray[function] transfers the data (one or more lists of		real numbers) which are contained in the function object		'function' back to Mathematica.";	QGetFunctionInfo::usage = 		"QGetFunctionInfo[function] prints some informations about the		function object 'function'";	QGetColorArray::usage = 		"QGetColorArray[function] gives a list of RGB colors associated		to a function object 'function' which represents a complex-valued		function.";	QGetGrayArray::usage = 		"QGetGrayArray[function]";	QGetRedBlueArray::usage = 		"QGetRedBlueArray[function]";	QGetBlackWhiteArray::usage = 		"QGetBlackWhiteArray[function]";	QGetAbsArray::usage = 		"QGetAbsArray[function]";	QInfo::usage = 		"QInfo[]"	(* TOperator Objects*)	QSchroedinger1D::usage = 		"QSchroedinger1D[V, mass, units]";	QSchroedinger2D::usage = 		"QSchroedinger2D[scalar, vector, domain, mass, charge, units]";	QSchroedinger3D::usage = 		"QSchroedinger3D[scalar, vector, domain, mass, charge, units]";	QPauli2D::usage = 		"QPauli2D[scalar, vector, domain, mass, charge, units]";	QPauli3D::usage = 		"QPauli3D[scalar, vector, domain, mass, charge, units]";	QDirac2D::usage = 		"QDirac2D[scalar, vector, domain, mass, charge, units]";	QDirac3D::usage = 		"QDirac3D[scalar, vector, domain, mass, charge, units]";	QDisposeOperator::usage = 		"QDisposeOperator[operator]";	QGetOperatorInfo::usage = 		"QGetOperatorInfo[operator]";	QTimeEvolution::usage = 		"QTimeEvolution[operator, function, timestep, fractal, steps]";	(* TWindow Objects*)	QShowWindow::usage = 		"QShowWindow[function, mode, slice]";	QHideWindow::usage = 		"QHideWindow[window]";	QGetWindowInfo::usage = 		"QGetWindowInfo[window]";	QBeginMovie::usage = 		"QBeginMovie[window]";	QEndMovie::usage = 		"QEndMovie[window]";	(* Render Functions *)	RenderComplex2DColor::usage = 		"RenderComplex2DColor[function, options]";	RenderComplex2DGray::usage = 		"RenderComplex2DGray[function, options]";	RenderComplex3D::usage = 		"RenderComplex3D[function, options]";	RenderComplex3DColor::usage = 		"RenderComplex3DColor[function, options]";	RenderComplex3DGray::usage = 		"RenderComplex3DGray[function, options]";	RenderScalar2DRedBlue::usage = 		"RenderScalar2DRedBlue[function, options]";	RenderScalar2DBlackWhite::usage = 		"RenderScalar2DBlackWhite[function, options]";	RenderScalar3D::usage = 		"RenderScalar3D[function, options]";	RenderScalar3DRedBlue::usage = 		"RenderScalar3DRedBlue[function, options]";	RenderScalar3DBlackWhite::usage = 		"RenderScalar3DBlackWhite[function, options]";	(* Numeric Functions *)	Gauss2D::usage = 		"Gauss2D[kx, ky, x0, y0, a, b]";	Gauss3D::usage = 		"Gauss3D[kx, ky, kz, x0, y0, z0, a, b]";			AbsGauss2D::usage = 		"AbsGauss2D[x0, y0, a, b]";	AbsGauss3D::usage = 		"AbsGauss3D[x0, y0, z0, a, b]";		CircleBlock2D::usage = 		"CircleBlock2D[x0, y0, r, a, b]";	CircleBlock3D::usage = 		"CircleBlock3D[x0, y0, z0, r, a, b]";		RectBlock2D::usage = 		"RectBlock2D[x0, y0, lx, ly, a, b]";	RectBlock3D::usage = 		"RectBlock3D[x0, y0, z0, lx, ly, lz, a, b]";		Linear12D::usage = 		"Linear12D[a, x0]";	Linear22D::usage = 		"Linear22D[b, y0]";	Linear13D::usage = 		"Linear13D[a, x0]";	Linear23D::usage = 		"Linear23D[b, y0]";	Linear33D::usage = 		"Linear33D[c, z0]";	AbsorbBlock2D::usage = 		"AbsorbBlock2D[d, nx, ny, a]";	AbsorbBlock3D::usage = 		"AbsorbBlock3D[d, nx, ny, nz, a]";	Begin["`Private`"];			QuantumLink = 			Install[				If[$OperatingSystem == "MacOS",					":AddOns:Applications:QuantumMechanics:QuantumKernel",					"AddOns/Applications/QuantumMechanics/QuantumKernel"				]			];		RenderComplex2DColor[psi_, opts___] := 			Show[Graphics[RasterArray[QGetColorArray[psi]]],opts];		RenderComplex2DGray[psi_, opts___] := 			Show[Graphics[RasterArray[QGetGrayArray[psi]]],opts];		RenderComplex3D[psi_, opts___] := 			ListPlot3D[QGetAbsArray[psi],opts];		RenderComplex3DColor[psi_, opts___] := 			ListPlot3D[QGetAbsArray[psi],Map[Rest,QGetColorArray[psi],{0,1}],opts];		RenderComplex3DGray[psi_, opts___] := 			ListPlot3D[Power[QGetAbsArray[psi],2],Map[Rest,QGetGrayArray[psi],{0,1}],opts];		RenderScalar2DRedBlue[v_, opts___] := 			Show[Graphics[RasterArray[QGetRedBlueArray[v]]],opts];		RenderScalar2DBlackWhite[v_, opts___] := 			Show[Graphics[RasterArray[QGetBlackWhiteArray[v]]],opts];		RenderScalar3D[v_, opts___] := 			ListPlot3D[Part[QGetArray[v],1],opts];		RenderScalar3DRedBlue[v_, opts___] := 			ListPlot3D[Part[QGetArray[v],1],Map[Rest,QGetRedBlueArray[v],{0,1}],opts];		RenderScalar3DBlackWhite[v_, opts___] := 			ListPlot3D[Part[QGetArray[v],1],Map[Rest,QGetBlackWhiteArray[v],{0,1}],opts];			Gauss2D[kx_,ky_,x0_,y0_,a_,b_] := Compile @@ 			{{y,x},Simplify[a*Exp[I(kx*x+ky*y)]*Exp[-((x-x0)^2+(y-y0)^2)/b]]}		Gauss3D[kx_,ky_,kz_,x0_,y0_,z0_,a_,b_] := Compile @@ 			{{z,y,x}, Simplify[a*Exp[I(kx x+ky y+kz z)]*Exp[-((x-x0)^2+(y-y0)^2+(z-z0)^2)/b]]}		AbsGauss2D[x0_,y0_,a_,b_] := Compile @@ 			{{y,x},Simplify[a*Exp[-((x-x0)^2+(y-y0)^2)/b]]}		AbsGauss3D[x0_,y0_,z0_,a_,b_] := Compile @@ 			{{z,y,x},Simplify[a*Exp[-((x-x0)^2+(y-y0)^2+(z-z0)^2)/b]]}		CircleBlock2D[x0_, y0_, r_, a_, b_] := Compile @@			{{y,x},If[(x-x0)^2+(y-y0)^2<r^2,a,b]}		CircleBlock3D[x0_, y0_, z0_, r_, a_, b_] := Compile @@			{{z,y,x},If[(x-x0)^2+(y-y0)^2+(z-z0)^2<r^2,a,b]}		RectBlock2D[x0_, y0_, x1_, y1_, a_, b_] := Compile @@			{{y,x},If[x>=x0 && x<=x1 && y>=y0 && y<=y1,a,b]}		RectBlock3D[x0_, y0_, z0_, x1_, y1_, z1_, a_, b_] := Compile @@			{{z,y,x},If[x>=x0 && x<=x1 && y>=y0 && y<=y1 && z>=z0 && z<=z1,a,b]}		Linear12D[a_, x0_] := Compile @@ {{y,x},a(x-x0)}		Linear22D[b_, y0_] := Compile @@ {{y,x},b(y-y0)}		Linear13D[a_, x0_] := Compile @@ {{z,y,x},a(x-x0)}		Linear23D[b_, y0_] := Compile @@ {{z,y,x},b(y-y0)}		Linear33D[c_, z0_] := Compile @@ {{z,y,x},c(z-z0)}		AbsorbBlock2D[d_, nx_, ny_, a_] := Compile @@			{{y,x},If[Min[x,nx-x+1,y,ny-y+1]<d,a(d-Min[x,nx-x+1,y,ny-y+1])^2,0]}		AbsorbBlock3D[d_, nx_, ny_, nz_, a_] := Compile @@			{{z,y,x},If[Min[x,nx-x+1,y,ny-y+1,nz-z+1]<d,a(d-Min[x,nx-x+1,y,ny-y+1,z,nz-z+1])^2,0]}	End[];EndPackage[];